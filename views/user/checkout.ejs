<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

  <link rel="stylesheet"
    href="https://cdn-uicons.flaticon.com/2.0.0/uicons-regular-straight/css/uicons-regular-straight.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/swiper@11/swiper-bundle.min.css" />
  <link rel="stylesheet" href="/css/styles.css" />
  <link rel="stylesheet" href="/bootstrap.min.css">
  <link rel="stylesheet" href="/css/tiny-slider.css">
  <link rel="stylesheet" href="/css/stylethree.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@4.3.1/dist/css/bootstrap.min.css">
  

  <title>Shop</title>


</head>

<body style="background-color: #EFF2F1;">
  <style>
    /* Change the table header color to black */
    table,
    th,
    td {
      border: 1px solid black !important;
      border-collapse: collapse !important;
      /* Ensures that borders between cells are merged */


    }

    .checkout-container {
      display: flex;
      gap: 20px;
      width: 100%;
      max-width: 1200px;
    }

    .checkout-card {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
      flex: 1;
    }

    .billing-details,
    .cart-totals {
      width: 100%;
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
      width: 100%;
      max-width: 600px;
    }

    .card-header {
      border-bottom: 1px solid #e0e0e0;
      padding-bottom: 15px;
      margin-bottom: 20px;
    }

    .card-header h3 {
      margin: 0;
      color: #333;
    }

    .form-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 15px;
    }

    .form-input {
      width: 100%;
      padding: 10px;
      border: 1px solid #ddd;
      border-radius: 5px;
      margin-bottom: 15px;
    }

    .form-input.full-width {
      grid-column: span 2;
    }

    .textarea {
      height: 100px;
      resize: vertical;
    }

    .product-item {
      display: flex;
      align-items: center;
      border-bottom: 1px solid #e0e0e0;
      padding: 15px 0;
    }

    .product-item:last-child {
      border-bottom: none;
    }

    .order-img {
      width: 80px;
      height: 80px;
      object-fit: cover;
      margin-right: 15px;
      border-radius: 8px;
    }

    .product-details {
      flex-grow: 1;
    }

    .table__title {
      margin: 0 0 5px 0;
      font-size: 16px;
      color: #333;
    }

    .table__quantity {
      margin: 0;
      color: #666;
      font-size: 14px;
    }

    .table__price {
      font-weight: bold;
      color: #333;
    }

    .order-summary {
      margin-top: 20px;
      border-top: 1px solid #e0e0e0;
      padding-top: 15px;
    }

    .summary-row {
      display: flex;
      justify-content: space-between;
      margin-bottom: 10px;
    }

    .payment-methods {
      margin-top: 20px;
    }

    .payment-option {
      display: flex;
      align-items: center;
      border: 1px solid #e0e0e0;
      border-radius: 8px;
      padding: 10px;
      margin-bottom: 10px;
    }

    .payment-option input {
      margin-right: 10px;
    }

    .place-order-btn {
      width: 100%;
      padding: 12px;
      background-color: #ffa600;
      color: rgb(0, 0, 0);
      border: none;
      border-radius: 8px;
      font-weight: bold;
      margin-top: 20px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }



    @media (max-width: 768px) {
      .checkout-container {
        flex-direction: column;
      }

      .form-grid {
        grid-template-columns: 1fr;
      }

      .form-input.full-width {
        grid-column: span 1;
      }
    }

    .checkout-card {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
      padding: 20px;
      width: 100%;
      max-width: 600px;
      height: 700px;
      overflow: scroll;
    }

    .card-header {
      border-bottom: 1px solid #e0e0e0;
      padding-bottom: 15px;
      margin-bottom: 20px;
    }

    .card-header h3 {
      margin: 0;
      color: #333;
    }

    .address-options {
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: 15px;
    }

    .address-card {
      border: 2px solid #e0e0e0;
      border-radius: 8px;
      padding: 15px;
      cursor: pointer;
      transition: all 0.3s ease;
      position: relative;
    }

    .address-card:hover {
      border-color: #ff9900;
      box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
    }

    .address-card.selected {
      border-color: #007bff;
      background-color: #f0f8ff;
    }

    .address-card input[type="radio"] {
      position: absolute;
      top: 10px;
      right: 10px;
    }

    .address-details p {
      margin-right: 20px;
      line-height: 10px;
    }

    .add-new-address {
      display: flex;
      align-items: center;
      justify-content: center;
      border: 2px dashed #ddd;
      border-radius: 8px;
      padding: 20px;
      text-align: center;
      cursor: pointer;
      transition: all 0.3s ease;
    }

    .add-new-address:hover {
      border-color: #007bff;
      background-color: #f0f8ff;
    }

    .add-new-address i {
      margin-right: 10px;
      font-size: 24px;
      color: #007bff;
    }

    .btn-primary {
      width: 100%;
      padding: 12px;
      background-color: #007bff;
      color: white;
      border: none;
      border-radius: 8px;
      margin-top: 20px;
      cursor: pointer;
      transition: background-color 0.3s ease;
    }

    .btn-primary:hover {
      background-color: #0056b3;
    }

    .cart__coupon {
      background-color: white;
      border-radius: 10px;
      box-shadow: 0 4px 10px rgba(0, 0, 0, 0.08);
      padding: 15px;
      width: 100%;
      max-width: 350px;
      transition: all 0.3s ease;
    }

    .section__title {
      color: #333;
      font-size: 18px;
      margin-bottom: 15px;
      font-weight: 600;
      display: flex;
      align-items: center;
      gap: 8px;
    }

    .section__title i {
      color: #ff9900;
      font-size: 16px;
    }

    .coupon__form {
      display: flex;
      flex-direction: column;
      gap: 10px;
    }

    .form__group {
      display: flex;
      align-items: center;
      gap: 8px;
      background-color: #f9f9f9;
      border-radius: 6px;
      padding: 4px;
      border: 1px solid #e0e0e0;
    }

    .form__input {
      flex-grow: 1;
      border: none;
      background-color: transparent;
      padding: 8px;
      font-size: 14px;
      outline: none;
    }

    .form__btn .btn {
      display: flex;
      align-items: center;
      gap: 6px;
      background-color: #ff9900;
      color: rgb(0, 0, 0);
      border: none;
      border-radius: 4px;
      padding: 8px 12px;
      cursor: pointer;
      font-size: 12px;
      transition: background-color 0.3s ease;
    }



    .available-coupons {
      margin-top: 15px;
    }

    .available-coupons h4 {
      color: #333;
      margin-bottom: 10px;
      font-size: 16px;
    }

    .coupon-card {
      background-color: #f0f4f8;
      border-radius: 8px;
      padding: 10px;
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 10px;
      border: 1px dashed #ff9900;
      transition: all 0.3s ease;
    }

    .coupon-card:hover {
      transform: translateY(-3px);
      box-shadow: 0 3px 10px rgba(213, 168, 43, 0.1);
    }

    .coupon-details {
      flex-grow: 1;
      margin-right: 10px;
    }

    .coupon-code {
      font-weight: bold;
      color: #ff9900;
      font-size: 16px;
      margin-bottom: 4px;
    }

    .coupon-description {
      color: #000000;
      font-size: 12px;
    }
  </style>

  <main class="main">
    <%- include('../partials/usernavbar') %>

      </nav>

      <main class="main">
        <!--=============== BREADCRUMB ===============-->
        <section class="breadcrumb">
          <ul class="breadcrumb__list flex container">
            <li><a href="/" class="breadcrumb__link">Home</a></li>
            <li><span class="breadcrumb__link"></span>></li>
            <li><a href="/shop"><span class="breadcrumb__link">Shop</span></a></li>
            <li><span class="breadcrumb__link"></span>></li>
            <li><span class="breadcrumb__link">Product Details</span></li>
          </ul>

          <section style="margin: auto; width: 95%;" class="checkout section--lg">
            <div class="checkout__container container grid">
              <div class="checkout-card">
                <div class="address-details">
                  <h3>Select Delivery Address</h3>
                </div>

                <div class="address-options">
                  <% address?.forEach(ad=> { %>
                    <div class="address-card">
                      <input type="radio" name="address" value="<%=ad._id %>">
                      <div class="address-details">
                        <p><b>Name:</b>
                          <%= ad.name %>
                        </p>
                        <p><b>Address:</b>
                          <%= ad.address %>
                        </p>
                        <p><b>City:</b>
                          <%= ad.city %>
                        </p>
                        <p><b>State:</b>
                          <%= ad.state %>
                        </p>
                        <p><b>Pincode:</b>
                          <%= ad.pincode %>
                        </p>
                        <p><b>Phone:</b>
                          <%= ad.phone %>
                        </p>
                      </div>
                    </div>
                    <% }) %>
                </div>

                <button class="place-order-btn"><a href="/address/create">Add Address</a></button>

              </div>



              <div class=" cart-totals">
                <div class="card-header">
                  <h3>Cart Totals</h3>
                </div>


                <% items.forEach(item=> { %>
                  <div class="product-list">
                    <div class="product-item">
                      <img src="<%= item.productId.productImage[0] %>" alt="Yidarton Women Summer Blue"
                        class="order-img" />
                      <div class="product-details">
                        <h3 class="table__title">
                          <%= item.productId.name %>
                        </h3>
                        <p class="table__quantity">Quantity : <%=item.quantity %>
                        </p>
                      </div>
                      <span class="table__price">₹<%=item.productId.salePrice %></span>
                    </div>
                  </div>
                  <% }) %>


                    <div class="order-summary">
                      <div class="summary-row">
                        <span>Subtotal</span>
                        <span id="tm" class="table__price">₹<%=totalAmount %></span>
                        <input id="totalAmount" type="text" hidden value="<%=totalAmount %>">
                      </div>
                      <div class="summary-row">
                        <span>Shipping</span>
                        <span style="color: green;">Free Shipping</span>
                      </div>
                      <div class="summary-row">
                        <span>Discount</span>
                        <span id="coupondiscount" style="color: rgb(0, 161, 0);">₹0</span>
                      </div>
                      <div class="summary-row" style="font-weight: bold;">
                        <span>Total</span>
                        <span id="ttotal">₹<%=totalAmount %></span>
                      </div>
                    </div>

                    <div class="payment-methods">
                      <div class="card-header">
                        <h3>Payment Method</h3>
                      </div>

                      <div class="payment-option">
                        <input type="radio" name="payment" />
                        <label>COD</label>
                      </div>
                      <div class="payment-option">
                        <input type="radio" name="payment" />
                        <label>OnlinePayment</label>
                      </div>
                    </div>


                    <button id="placeOrder" class="place-order-btn">Place Order</button>
              </div>

              <div class="cart__coupon">
                <h3 class="section__title">
                  <i class="fi-rs-label"></i>
                  Apply Coupon
                </h3>

                <form class="coupon__form form grid">
                  <div class="form__group grid">
                    <input id="couponCode" type="text" class="form__input" placeholder="Enter Your Coupon" />
                    <div class="form__btn">

                      <button id="apply" class="btn flex btn--sm">
                        <i class="fi-rs-label"></i> Apply
                      </button>
                    </div>

                  </div>
                </form>

                <div class="available-coupons">
                  <h4>Available Coupons</h4>
                  <% if (availableCoupons && availableCoupons.length> 0) { %>
                    <% availableCoupons.forEach(coupon=> { %>
                      <div class="coupon-card">
                        <div class="coupon-details">
                          <div class="coupon-code">
                            <%= coupon.code %>
                          </div>
                          <div class="coupon-description">
                            <%= coupon.discountValue %>% discount
                          </div>
                        </div>
                      </div>
                      <% }) %>
                        <% } else { %>
                          <p>No available coupons</p>
                          <% } %>
                </div>

                <a style="text-decoration: none;" id="cancel-coupon" href="">
                  <p style="color: red;"> <b>Cancel</b> </p>
                </a>

              </div>
            </div>


          </section>





        </section>







      </main>
      <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
      <script src="https://checkout.razorpay.com/v1/checkout.js"></script>

      <script>

        const addressCards = document.querySelectorAll('.address-card:not(.add-new-address)');

        addressCards.forEach(card => {
          card.addEventListener('click', () => {

            addressCards.forEach(c => {
              c.classList.remove('selected');
              c.querySelector('input[type="radio"]').checked = false;
            });


            card.classList.add('selected');
            card.querySelector('input[type="radio"]').checked = true;
          });
        });

        placeOrder.addEventListener("click", async (event) => {
          event.preventDefault();

          const selectedAddressCard = document.querySelector('.address-card.selected');
          const addressId = selectedAddressCard ?
            selectedAddressCard.querySelector('input[type="radio"]').value :
            null;


          const selectedPaymentRadio = document.querySelector('input[name="payment"]:checked');
          const selectedPaymentMethod = selectedPaymentRadio ? selectedPaymentRadio.parentElement.querySelector('label').textContent.trim() :
            null;
          const ttotal = document.getElementById("ttotal").value;
          const couponCode = document.getElementById("couponCode").value;


          if (!addressId) {
            Swal.fire({
              icon: 'error',
              title: 'Please select a delivery address!',
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timer: 2000,
              timerProgressBar: true,
            });
            return;
          }


          if (!selectedPaymentMethod) {
            Swal.fire({
              icon: 'error',
              title: 'Please select a payment method!',
              toast: true,
              position: 'top-right',
              showConfirmButton: false,
              timer: 2000,
              timerProgressBar: true,
            });
            return;
          }
          console.log(selectedPaymentMethod)

          if (selectedPaymentMethod == "COD") {

            try {

              const response = await fetch('/order/place-order', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  addressId: addressId,
                  paymentMethod: selectedPaymentMethod,
                  totalAmount: ttotal,
                  couponCode: couponCode,
                })
              });

              const result = await response.json();

              console.log(result)

              if (result.success) {
                Swal.fire({
                  icon: 'success',
                  title: 'Order placed successfully!',

                  toast: true,
                  position: 'top-right',
                  showConfirmButton: false,
                  timer: 2000,
                  timerProgressBar: true,
                }).then(() => {

                  window.location.href = `/order-confirmation/${result.newOrder._id}`;
                });
              } else {
                Swal.fire({
                  icon: 'error',
                  title: result.message || 'Failed to place order',
                  toast: true,
                  position: 'top-right',
                  showConfirmButton: false,
                  timer: 2000,
                  timerProgressBar: true,
                });
              }



            } catch (error) {
              console.error('Order placement error:', error);
              Swal.fire({
                icon: 'error',
                title: 'An error occurred while placing the order',
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
              });

            }

          } else if (selectedPaymentMethod == "OnlinePayment") {
            try {
              const ttotalElement = document.getElementById("ttotal");
              console.log(ttotalElement)
              const rawAmount = ttotalElement.textContent.replace('₹', '').trim();
              console.log(rawAmount)
              const totalAmount = parseFloat(rawAmount);
              console.log(totalAmount)

              const response = await fetch('/order/razorpay', {
                method: 'POST',
                headers: {
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  addressId: addressId,
                  paymentMethod: selectedPaymentMethod,
                  payableAmount: totalAmount,
                  couponCode: couponCode || null,
                })
              });

              if (!response.ok) {
                throw new Error(`Check Your Cart !`);
              }

              const result = await response.json();
              console.log("result + ", result)

              if (!result.success) {
                throw new Error(result.message || 'Failed to initialize payment');
              }

              const options = {
                key: result.razorpayKey,
                amount: result.amount,
                currency: 'INR',
                name: 'Your Store Name',
                description: 'Order Payment',
                order_id: result.orderId,
                prefill: result.prefill,
                handler: async function (response) {
                  try {
                    const verifyResponse = await fetch('/order/verify-payment', {
                      method: 'POST',
                      headers: {
                        'Content-Type': 'application/json',
                      },
                      body: JSON.stringify({
                        razorpay_payment_id: response.razorpay_payment_id,
                        razorpay_order_id: response.razorpay_order_id,
                        razorpay_signature: response.razorpay_signature
                      })
                    });

                    if (!verifyResponse.ok) {
                      throw new Error('Payment verification failed');
                    }

                    const verifyResult = await verifyResponse.json();
                    console.log("verifyResult + ", verifyResult)



                    if (verifyResult.success) {
                 
                      const notificationSound = new Audio('/images/payment.m4a');

                      
                      notificationSound.play().then(() => {
                       
                        Swal.fire({
                          icon: 'success',
                          title: 'Payment successful!',
                          toast: true,
                          position: 'top-right',
                          showConfirmButton: false,
                          timer: 5000,
                          timerProgressBar: true,
                        }).then(() => {
                         
                          window.location.href = `/order-confirmation/${verifyResult.orderId}`;
                        });
                      }).catch((error) => {
                        console.error('Error playing sound:', error);
                        
                        Swal.fire({
                          icon: 'success',
                          title: 'Payment successful!',
                          toast: true,
                          position: 'top-right',
                          showConfirmButton: false,
                          timer: 2000,
                          timerProgressBar: true,
                        }).then(() => {
                          window.location.href = `/order-confirmation/${verifyResult.orderId}`;
                        });
                      });
                    }



                    else {
                      throw new Error(verifyResult.message || 'Payment verification failed');
                    }
                  } catch (err) {
                    console.error('Payment verification error:', err);
                    Swal.fire({
                      icon: 'error',
                      title: err.message || 'Payment verification failed',
                      toast: true,
                      position: 'top-right',
                      showConfirmButton: false,
                      timer: 3000,
                      timerProgressBar: true,
                    });
                  }
                },
                modal: {
                  ondismiss: function () {
                    Swal.fire({
                      icon: 'warning',
                      title: 'Payment cancelled',
                      toast: true,
                      position: 'top-right',
                      showConfirmButton: false,
                      timer: 2000,
                      timerProgressBar: true,
                    });
                  }
                }
              };

              const rzp = new Razorpay(options);
              rzp.open();
              rzp.on('payment.failed', (response) => {
                console.log(response);
                window.location.href = `/order-failed-confirmation/${response.error.metadata.order_id}`;
              })

            } catch (error) {
              console.error('Payment initialization error:', error);
              Swal.fire({
                icon: 'error',
                title: error.message || 'Failed to initialize payment',
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timer: 3000,
                timerProgressBar: true,
              });
            }
          }



        });


        document.getElementById("apply").addEventListener("click", async function (event) {
          event.preventDefault();

          const couponCode = document.getElementById("couponCode").value;
          const totalAmount = document.getElementById("totalAmount").value;

          if (!couponCode || !totalAmount) {
            console.error("Coupon code or total amount is missing.");
            return;
          }

          console.log("Applying coupon with code:", couponCode, "and amount:", totalAmount);

          try {
            const response = await fetch('/coupon/apply', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                couponCode: couponCode || "x",
                totalAmount: totalAmount
              })
            });
            const result = await response.json();

            if (result.success) {

              const totalAmountSpan = document.getElementById('ttotal');
              const coupondiscount = document.getElementById('coupondiscount')
              coupondiscount.textContent = `₹${(totalAmount - result.totalAmount)}`
              totalAmountSpan.textContent = `₹${result.totalAmount}`;



              Swal.fire({
                icon: 'success',
                title: 'Coupon applied successfully!',
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
              });
            } else {
              Swal.fire({
                icon: 'error',
                title: result.message || 'Failed to apply coupon',
                toast: true,
                position: 'top-right',
                showConfirmButton: false,
                timer: 2000,
                timerProgressBar: true,
              });
            }

          } catch (error) {
            console.error("Failed to apply coupon:", error);
          }
        });


        document.getElementById("cancel-coupon").addEventListener("click", async function (event) {

          event.preventDefault();
          swal.fire({
            title: 'Are you sure you want to cancel the coupon?',
            text: "You won't be able to apply the coupon again.",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#3085d6',
            cancelButtonColor: '#d33',
            confirmButtonText: 'Yes, cancel it!'
          })
            .then((result) => {
              if (result.isConfirmed) {

                swal.fire({
                  icon: 'success',
                  title: 'Coupon canceled successfully!',
                  toast: true,
                  position: 'top-right',
                  showConfirmButton: false,
                  timer: 2000,
                  timerProgressBar: true,
                })
                  .then(() => {
                    window.location.reload();
                  })



              }
            })




        })



      </script>
</body>

</html>