<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create Product</title>
    <link rel="stylesheet" href="/css/bootstrap.min.css">
    <link rel="stylesheet" href="/public/css/admin.css">
    <link rel="stylesheet" href="https://unpkg.com/cropperjs/dist/cropper.min.css">
    <link rel="stylesheet" href="/css/addproduct.css">
</head>

<body>
    <div class="main-div">
        <%- include("../partials/adminNavbar") %>
            <div class="hello">
                <%- include('../partials/adminSidebar') %>
            </div>

            <div class="containerCreateProduct">
                <h1>Create Product</h1>

                <form id="productForm" enctype="multipart/form-data" class="product-form">
                    <label for="name">Product Name</label>
                    <input type="text" name="name" id="name">



                    <label for="description">Product Description</label>
                    <textarea name="description" id="description"></textarea>

                    <label for="brand">Brand</label>
                    <input type="text" name="brand" id="brand">

                    <label for="category">Category</label>
                    <select name="category" id="category">
                        <!-- Add categories dynamically here -->
                        <% category.forEach(cat=> { %>
                            <option value="<%= cat._id %>">
                                <%= cat.name %>
                            </option>
                            <% }) %>

                    </select>

                    <label for="regularPrice">Regular Price</label>
                    <input type="number" name="regularPrice" id="regularPrice">

                    <label for="salePrice">Sale Price</label>
                    <input type="number" name="salePrice" id="salePrice">

                    <label for="quantity">Quantity</label>
                    <input type="number" name="quantity" id="quantity">

                    <!-- <label for="status">Status</label>
                    <select name="status" id="status">
                        <option value="Available">Available</option>
                        <option value="Out Of Stock">Out Of Stock</option>
                        <option value="Discontinued">hurry up !</option>
                    </select> -->

                    <h4>Specifications</h4>
                    <label for="RAM">RAM</label>
                    <select  name="RAM" id="RAM">
                        <% ram.forEach((data)=>{ %>
                           <option value="<%= data._id  %>">
                            <%= data.value %>
                           </option>



                            <% }) %>

                        </select>

                    <label for="processor">Processor</label>
                    <select type="text" name="processor" id="processor">
                        <% processor.forEach((data)=>{ %>
                            <option value="<%= data._id  %>">
                            <%= data.value %>
                            </option>
                            <% }) %>
                        </select>

                    <label for="displaySize">Display Size</label>
                    <select  name="displaySize" id="displaySize">
                        <% display.forEach((data)=>{ %>
                            <option value="<%= data._id  %>">
                            <%= data.value %>
                            </option>
                            <% }) %>
                        
                        </select>


                    <label for="storage">Storage</label>
                    <select name="storage" id="storage">
                        <% storage.forEach((data)=>{ %>
                            <option value="<%= data._id%>">
                            <%= data.value%>
                            </option>
                            <% }) %>

                        </select>

                    <div class="crop-section">
                        <label for="productImage1">Product Image 1</label>
                        <input type="file" name="productImage1" id="productImage1" accept="image/*">
                        <img id="imagePreview1" alt="Image Preview 1" style="display:none;">
                        <button type="button" id="cropButton1" style="display:none;">Crop Image 1</button>
                    </div>

                    <div class="crop-section">
                        <label for="productImage2">Product Image 2</label>
                        <input type="file" name="productImage2" id="productImage2" accept="image/*">
                        <img id="imagePreview2" alt="Image Preview 2" style="display:none;">
                        <button type="button" id="cropButton2" style="display:none;">Crop Image 2</button>
                    </div>

                    <div class="crop-section">
                        <label for="productImage3">Product Image 3</label>
                        <input type="file" name="productImage3" id="productImage3" accept="image/*">
                        <img id="imagePreview3" alt="Image Preview 3" style="display:none;">
                        <button type="button" id="cropButton3" style="display:none;">Crop Image 3</button>
                    </div>

                    <div id="cropModal" class="crop-modal">
                        <div class="modal-content">
                            <img id="imageToCrop" alt="Image to Crop">
                            <div class="button-group">
                                <button type="button" id="saveCrop">Save Cropped Image</button>
                                <button type="button" id="cancelCrop">Cancel</button>
                            </div>
                        </div>
                    </div>


                    <div class="center-button">
                        <button type="submit" class="submit-button">Create Product</button>
                    </div>
                </form>

                <a href="/admin/products" class="back-button" style="color: #ffa600; margin: 299px;">Back to Products</a>
            </div>
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <script src="https://unpkg.com/sweetalert/dist/sweetalert.min.js"></script>
    <script src="https://unpkg.com/cropperjs/dist/cropper.min.js"></script>
    <script>
       let cropper;
let currentImageIndex = null;
let croppedImages = new Array(3).fill(null);

// Initialize DOM elements
const imageInputs = [
    document.getElementById('productImage1'),
    document.getElementById('productImage2'),
    document.getElementById('productImage3')
];
const imagePreviews = [
    document.getElementById('imagePreview1'),
    document.getElementById('imagePreview2'),
    document.getElementById('imagePreview3')
];
const cropButtons = [
    document.getElementById('cropButton1'),
    document.getElementById('cropButton2'),
    document.getElementById('cropButton3')
];
const cropModal = document.getElementById('cropModal');
const saveCropButton = document.getElementById('saveCrop');
const cancelCropButton = document.getElementById('cancelCrop');
const imageToCrop = document.getElementById('imageToCrop');
const productForm = document.getElementById("productForm");

// Handle image input changes
imageInputs.forEach((input, index) => {
    input.addEventListener('change', function(event) {
        const file = event.target.files[0];
        if (file) {
            // Validate file type
            if (!file.type.startsWith('image/')) {
                swal({
                    title: 'Invalid File',
                    text: 'Please select an image file',
                    icon: 'error',
                    confirmButtonText: 'Okay'
                });
                input.value = '';
                return;
            }

            const reader = new FileReader();
            reader.onload = function(e) {
                imagePreviews[index].src = e.target.result;
                imagePreviews[index].style.display = 'block';
                cropButtons[index].style.display = 'inline-block';
            };
            reader.readAsDataURL(file);
        }
    });
});

// Handle crop button clicks
cropButtons.forEach((button, index) => {
    button.addEventListener('click', function() {
        currentImageIndex = index;
        cropModal.style.display = 'flex';
        imageToCrop.src = imagePreviews[index].src;

        if (cropper) {
            cropper.destroy();
        }

        cropper = new Cropper(imageToCrop, {
            aspectRatio: 1,
            viewMode: 1,
            autoCropArea: 0.8,
            zoomable: true,
            movable: true,
            minCropBoxWidth: 200,
            minCropBoxHeight: 200
        });
    });
});

// Handle save crop button
saveCropButton.addEventListener('click', function() {
    if (cropper) {
        const canvas = cropper.getCroppedCanvas({
            width: 800,  // Set maximum dimensions for the cropped image
            height: 800,
            imageSmoothingEnabled: true,
            imageSmoothingQuality: 'high'
        });

        const croppedImageDataUrl = canvas.toDataURL('image/jpeg', 0.9);
        const blob = dataURItoBlob(croppedImageDataUrl);
        
        // Store cropped image
        croppedImages[currentImageIndex] = blob;
        imagePreviews[currentImageIndex].src = croppedImageDataUrl;
        
        cropper.destroy();
        cropModal.style.display = 'none';
    }
});

// Handle cancel crop button
cancelCropButton.addEventListener('click', function() {
    if (cropper) {
        cropper.destroy();
        cropModal.style.display = 'none';
    }
});

// Convert Data URI to Blob
function dataURItoBlob(dataURI) {
    const byteString = atob(dataURI.split(',')[1]);
    const mimeString = dataURI.split(',')[0].split(':')[1].split(';')[0];
    const ab = new ArrayBuffer(byteString.length);
    const ia = new Uint8Array(ab);
    
    for (let i = 0; i < byteString.length; i++) {
        ia[i] = byteString.charCodeAt(i);
    }
    
    return new Blob([ab], { type: mimeString });
}

// Form submission handler
productForm.addEventListener("submit", function(event) {
    event.preventDefault();
    
    // Get form values
    const name = document.getElementById("name").value.trim();
    const description = document.getElementById("description").value.trim();
    const brand = document.getElementById("brand").value.trim();
    const category = document.getElementById("category").value;
    const regularPrice = parseFloat(document.getElementById("regularPrice").value);
    const salePrice = parseFloat(document.getElementById("salePrice").value);
    const quantity = parseInt(document.getElementById("quantity").value);
    const RAM = document.getElementById("RAM").value;
    const processor = document.getElementById("processor").value;
    const displaySize = document.getElementById("displaySize").value;
    const storage = document.getElementById("storage").value;

    // Validation
    let errorMessage = "";
    
    if (!name) errorMessage = "Product name is required.";
    else if (!description) errorMessage = "Product description is required.";
    else if (!brand) errorMessage = "Product brand is required.";
    else if (!category) errorMessage = "Product category is required.";
    else if (!regularPrice || regularPrice <= 0) errorMessage = "Regular price must be a positive number.";
    else if (!salePrice || salePrice < 0) errorMessage = "Sale price must be a non-negative number.";
    else if (!quantity || quantity < 0) errorMessage = "Quantity must be a non-negative number.";
    else if (salePrice > regularPrice) errorMessage = "Sale price cannot be greater than regular price.";
    else if (!RAM) errorMessage = "RAM specification is required.";
    else if (!processor) errorMessage = "Processor specification is required.";
    else if (!displaySize) errorMessage = "Display size specification is required.";
    else if (!storage) errorMessage = "Storage specification is required.";
    else if (!croppedImages[0]) errorMessage = "First product image is required.";
    else if (!croppedImages[1]) errorMessage = "Second product image is required.";
    else if (!croppedImages[2]) errorMessage = "Third product image is required.";

    if (errorMessage) {
        swal({
            title: 'Validation Error',
            text: errorMessage,
            icon: 'error',
            confirmButtonText: 'Okay'
        });
        return;
    }

    // Create FormData and append values
    const formData = new FormData();
    formData.append("name", name);
    formData.append("description", description);
    formData.append("brand", brand);
    formData.append("category", category);
    formData.append("regularPrice", regularPrice);
    formData.append("salePrice", salePrice);
    formData.append("quantity", quantity);
    formData.append("RAM", RAM);
    formData.append("processor", processor);
    formData.append("displaySize", displaySize);
    formData.append("storage", storage);

    // Append cropped images
    croppedImages.forEach((blob, index) => {
        if (blob) {
            formData.append('images', blob, `product-image-${index + 1}.jpg`);
        }
    });

    // Show loading state
    const submitButton = document.querySelector('.submit-button');
    const originalButtonText = submitButton.textContent;
    submitButton.textContent = 'Creating Product...';
    submitButton.disabled = true;

    // Submit form
    fetch('/products/add', {
        method: 'POST',
        body: formData
    })
    .then(response => {
        if (!response.ok) {
            throw new Error('Network response was not ok');
        }
        return response.json();
    })
    .then(result => {
        if (result.message) {
            swal({
                title: 'Success',
                text: "Product has been created successfully!",
                icon: 'success',
                confirmButtonText: 'Okay'
            }).then(() => {
                window.location.href = "/admin/products";
            });
        } else {
            throw new Error(result.error || 'Failed to create product');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        swal({
            title: 'Error',
            text: "Failed to create product. Please try again.",
            icon: 'error',
            confirmButtonText: 'Okay'
        });
    })
    .finally(() => {
        // Reset button state
        submitButton.textContent = originalButtonText;
        submitButton.disabled = false;
    });
});


window.onclick = function(event) {
    if (event.target === cropModal) {
        if (cropper) {
            cropper.destroy();
            cropModal.style.display = 'none';
        }
    }
};


    </script>

</body>

</html>