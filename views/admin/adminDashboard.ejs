<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link rel="stylesheet" href="../../public/css/bootstrap.min.css">
    <link rel="stylesheet" href="../../public/css/admin.css">
</head>
<body>
    <style>
     
.main-div {
    display: flex;
    background: #0000;
    min-height: 100vh;
}

.dashboard {
    padding: 20px;
    width: 100%;
}


.dashboard-header {
    background: #1e1e1e;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.3);
    margin-bottom: 20px;
    border: 1px solid #333;
}

.dashboard-title {
    color: #ffffff;
    font-size: 24px;
    margin-bottom: 20px;
}

.filters {
    display: flex;
    gap: 20px;
    margin-bottom: 20px;
    flex-wrap: wrap;
}

.filter-group {
    display: flex;
    flex-direction: column;
    gap: 5px;
}

.filter-group label {
    font-size: 14px;
    color: #b0b0b0;
}

.filter-group input {
    padding: 8px;
    background: #2d2d2d;
    border: 1px solid #444;
    border-radius: 5px;
    font-size: 14px;
    color: #ffffff;
}

.filter-group input:focus {
    outline: none;
    border-color: #666;
}

.filter-button {
    background: orange;
    color: rgb(0, 0, 0);
    border: none;
    padding: 10px 20px;
    border-radius: 5px;
    cursor: pointer;
    align-self: flex-end;
    transition: all 0.3s ease;
}


/* Stats Grid */
.stats-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    margin-bottom: 20px;
}

.stat-card {
    background: #1e1e1e;
    padding: 20px;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.3);
    border: 1px solid #333;
}

.stat-title {
    font-size: 14px;
    color: #b0b0b0;
    margin-bottom: 5px;
}

.stat-value {
    font-size: 24px;
    color: #ffffff;
    font-weight: bold;
}

/* Chart Container */
.chart-container {
    width: 900px;
    height: 600px;
    padding: 40px;
    background-color: #1e1e1e;
    border-radius: 10px;
    box-shadow: 0 4px 6px rgba(0,0,0,0.3);
    border: 1px solid #333;
}

/* Chart Components */
.chart {
    display: flex;
    align-items: flex-end;
    height: 400px;
    gap: 40px;
    padding: 0 40px 40px 60px;
    border-bottom: 2px solid #333;
    position: relative;
}

.bar {
    width: 80px;
    transition: all 0.3s ease;
    position: relative;
    border-radius: 6px 6px 0 0;
    cursor: pointer;
}

.bar:hover {
    opacity: 0.8;
    transform: scale(1.05);
}

.bar::after {
    content: attr(data-value);
    position: absolute;
    top: -25px;
    left: 50%;
    transform: translateX(-50%);
    color: #fff;
    font-size: 14px;
}

/* Bar Colors */
.bar:nth-child(1) { background-color: #B76666; }
.bar:nth-child(2) { background-color: #4682B4; }
.bar:nth-child(3) { background-color: #DAA520; }
.bar:nth-child(4) { background-color: #40A4A4; }
.bar:nth-child(5) { background-color: #663399; }
.bar:nth-child(6) { background-color: #CD853F; }

/* Axes */
.y-axis {
    position: absolute;
    left: -10px;
    height: 100%;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    color: #999;
    font-size: 16px;
}

.x-axis {
    display: flex;
    gap: 40px;
    margin-top: 20px;
    padding-left: 60px;
    color: #999;
    font-size: 16px;
}

.x-label {
    width: 80px;
    text-align: center;
}

/* Grid Lines */
.grid-lines {
    position: absolute;
    width: calc(100% - 60px);
    height: 100%;
    right: 0;
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    pointer-events: none;
}

.grid-line {
    width: 100%;
    height: 1px;
    background-color: #333;
}

/* Fixed Elements */
.hello {
    position: fixed;
    z-index: 2000;
}

/* Responsive Design */
@media (max-width: 768px) {
    .filters {
        flex-direction: column;
    }
    
    .filter-button {
        width: 100%;
    }
    
    .chart-container {
        width: 100%;
        height: auto;
        min-height: 400px;
        padding: 20px;
    }
    
    .chart {
        gap: 20px;
        padding: 0 20px 20px 40px;
    }
    
    .bar {
        width: 40px;
    }
    
    .x-axis {
        gap: 20px;
        padding-left: 40px;
    }
    
    .x-label {
        width: 40px;
        font-size: 12px;
    }
}
    </style>
    <div class="main-div">
        <%-include("../partials/adminNavbar") %>
      <div class="hello"> 
        <%-include('../partials/adminSidebar')%>
      </div>

      
        <div class="main-panel">

          <div class="content-wrapper">
            <div class="row">
              <div class="col-12 grid-margin stretch-card">
                <div class="card corona-gradient-card">
                  <div class="card-body py-0 px-0 px-sm-3">
                    <div class="row align-items-center">
                      <div class="col-4 col-sm-3 col-xl-2">
                        <img src="assets/images/dashboard/Group126@2x.png" class="gradient-corona-img img-fluid" alt="">
                      </div>
                      <div class="col-5 col-sm-7 col-xl-8 p-0">
                        <h4 class="mb-1 mb-sm-0">Lapegde!!</h4>
                        <p class="mb-0 font-weight-normal d-none d-sm-block"> Sales Data</p>
                      </div>
                      <div class="col-3 col-sm-2 col-xl-2 pl-0 text-center">
                        <span>
                          <a href="https://www.bootstrapdash.com/product/corona-admin-template/" target="_blank" class="btn btn-outline-light btn-rounded get-started-btn">Dashdoard</a>
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            </div>

          <div class="dashboard">
            <div class="dashboard-header">
                <h1 class="dashboard-title">Sales Analytics</h1>
                
                <div class="filters">
                    <!-- Date range filter -->
                    <div class="filter-group">
                        <label for="startDate">Start Date</label>
                        <input type="date" id="startDate">
                    </div>
                    <div class="filter-group">
                        <label for="endDate">End Date</label>
                        <input type="date" id="endDate">
                    </div>
                    <button class="filter-button" onclick="updateChart()">Update Chart</button>
                    
                    <!-- Interval selection filters -->
                    <button class="filter-button" onclick="setFilter('weekly')">Weekly</button>
                    <button class="filter-button" onclick="setFilter('monthly')">Monthly</button>
                    <button class="filter-button" onclick="setFilter('yearly')">Yearly</button>
                </div>
            </div>
        
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-title">Total Sales</div>
                    <div class="stat-value" id="totalSales">$0</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">Total Orders</div>
                    <div class="stat-value" id="totalOrders">0</div>
                </div>
                <div class="stat-card">
                    <div class="stat-title">Average Order Value</div>
                    <div class="stat-value" id="avgOrderValue">$0</div>
                </div>
            </div>
        
            <!-- Chart Container -->
            <div class="chart-container">
                <canvas id="salesChart" width="400" height="200"></canvas>
            </div>
        </div>
            
              
              <div class="chart-container">
                <select id="chartSelect" class="chart-title">
                    <option value="products">Best Selling Products</option>
                    <option value="categories">Best Selling Categories</option>
                </select>
                <input type="hidden"  id="topproduct"   value="<%= JSON.stringify(topProducts) %>">
                <input type="hidden"  id="topcategories"   value="<%= JSON.stringify(topCategories) %>">
        
                <div class="chart">
                    <canvas id="myChart" width="900" height="400"></canvas>
                </div>
            </div>
              
              
              
              
              
              
                
                
              
              
            
          </div>
         
          
         
          
        
        
    </div>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
q
    <script>

      const topProducts =  JSON.parse(document.getElementById("topproduct").value) 
      const topCategories =  JSON.parse(document.getElementById("topcategories").value) 
     

      
        

      console.log(topProducts);
      console.log(topCategories)
       
      

      
      let chartData = {
          labels: topProducts.map(product => product.name),
          datasets: [{
              label: 'Total Sold',
              data: topProducts.map(product => product.totalSold),
              backgroundColor: 'rgba(75, 192, 192, 0.2)',
              borderColor: 'rgba(75, 192, 192, 1)',
              borderWidth: 1
          }]
      };

   
      const ctx = document.getElementById('myChart').getContext('2d');
      const myChart = new Chart(ctx, {
          type: 'bar',
          data: chartData,
          options: {
              scales: {
                  y: { beginAtZero: true }
              }
          }
      });

     
      document.getElementById('chartSelect').addEventListener('change', function (e) {
          const value = e.target.value;

          if (value === 'products') {
              chartData = {
                  labels: topProducts.map(product => product.name),
                  datasets: [{
                      label: 'Total Sold',
                      data: topProducts.map(product => product.totalSold),
                      backgroundColor: 'rgba(75, 192, 192, 0.2)',
                      borderColor: 'rgba(75, 192, 192, 1)',
                      borderWidth: 1
                  }]
              };
          } else if (value === 'categories') {
              chartData = {
                  labels: topCategories.map(cat => cat.categoryDetails.name),
                  datasets: [{
                      label: 'Total Sold',
                      data: topCategories.map(cat => cat.total),
                      backgroundColor: 'rgba(153, 102, 255, 0.2)',
                      borderColor: 'rgba(153, 102, 255, 1)',
                      borderWidth: 1
                  }]
              };
          } 

    
          myChart.data = chartData;
          myChart.update();
      });
  </script>




  <script>


let salesChart;

function initChart(data) {
    const ctx = document.getElementById('salesChart').getContext('2d');
    
    if (salesChart) {
        salesChart.destroy();
    }

    const dates = data.map(item => item._id);
    const sales = data.map(item => item.totalSales);

    const totalSales = sales.reduce((a, b) => a + b, 0);
    const totalOrders = data.reduce((a, b) => a + b.count, 0);
    const avgOrderValue = totalSales / totalOrders;

    document.getElementById('totalSales').textContent = `₹${totalSales.toLocaleString()}`;
    document.getElementById('totalOrders').textContent = totalOrders.toLocaleString();
    document.getElementById('avgOrderValue').textContent = `₹${avgOrderValue.toFixed(2)}`;

    salesChart = new Chart(ctx, {
        type: 'line',
        data: {
            labels: dates,
            datasets: [{
                label: 'Daily Sales',
                data: sales,
                borderColor: '#ffaa00',
                backgroundColor: 'rgba(255, 165, 0, 0.1)',
                tension: 0.4,
                fill: true
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    position: 'top',
                    labels: {
                        color: '#e0e0e0'
                    }
                },
                title: {
                    display: true,
                    text: 'Daily Sales Trend',
                    color: '#e0e0e0'
                }
            },
            scales: {
                y: {
                    beginAtZero: true,
                    grid: {
                        color: '#333'
                    },
                    ticks: {
                        color: '#e0e0e0',
                        callback: value => '₹' + value.toLocaleString()
                    },
                    title: {
                        display: true,
                        text: 'Sales Amount (₹)',
                        color: '#e0e0e0'
                    }
                },
                x: {
                    grid: {
                        color: '#333'
                    },
                    ticks: {
                        color: '#e0e0e0'
                    },
                    title: {
                        display: true,
                        text: 'Date',
                        color: '#e0e0e0'
                    }
                }
            }
        }
    });
}

function setFilter(period) {
    const today = new Date();
    let startDate, endDate;

    endDate = today.toISOString().split('T')[0]; 

    switch (period) {
        case 'weekly':
            const oneWeekAgo = new Date(today);
            oneWeekAgo.setDate(today.getDate() - 7);
            startDate = oneWeekAgo.toISOString().split('T')[0];
            break;
        case 'monthly':
            const oneMonthAgo = new Date(today);
            oneMonthAgo.setMonth(today.getMonth() - 1);
            startDate = oneMonthAgo.toISOString().split('T')[0];
            break;
        case 'yearly':
            const oneYearAgo = new Date(today);
            oneYearAgo.setFullYear(today.getFullYear() - 1);
            startDate = oneYearAgo.toISOString().split('T')[0];
            break;
        default:
            return;
    }

    document.getElementById('startDate').value = startDate;
    document.getElementById('endDate').value = endDate;

    updateChart();
}

async function updateChart() {
    const startDate = document.getElementById('startDate').value;
    const endDate = document.getElementById('endDate').value;
    if (new Date(startDate) > new Date(endDate)) {
                    return Swal.fire({
                        toast:true,
                        icon:"warning",
                        title:"Start date cannot be greater than the end date.",
                        position:"top-end",
                        showConfirmButton: false,
                        timer: 3000

                    })
           
        }
    
    try {
        const response = await fetch(`/admin/sales-chart?startDate=${startDate}&endDate=${endDate}`);
        const result = await response.json();
        
        if (result.success) {
            initChart(result.data);
        } else {
            console.error('Error:', result.message);
        }
    } catch (error) {
        console.error('Error fetching data:', error);
    }
}


const today = new Date();
const thirtyDaysAgo = new Date(today);
thirtyDaysAgo.setDate(today.getDate() - 30);

document.getElementById('endDate').value = today.toISOString().split('T')[0];
document.getElementById('startDate').value = thirtyDaysAgo.toISOString().split('T')[0];


updateChart();

  </script>

    
</body>
</html>